{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/Error.ts","api/users.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","userPosts","onOpenSidebar","selectedPost","className","map","post","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","ErrorMessage","client","getPostComments","deleteComment","NewCommentForm","postComments","setPostComments","setError","useState","name","setName","email","setEmail","comment","setComment","newId","setNewId","loading","setLoading","errorForm","setErrorForm","useEffect","allComments","maxId","Math","max","handleRemoveErrorForm","field","onSubmit","event","preventDefault","trim","newComment","postId","addComment","catch","Add","finally","htmlFor","placeholder","value","onChange","e","target","None","PostDetails","setErrorType","errorType","isLoading","setIsLoaling","comments","setComments","isError","setIsError","formIsOpen","setFormIsOpen","hendleLoadComents","a","commentsFromServer","length","UserPosts","handleDeleteComment","commentId","filter","Delete","href","UserSelector","users","onLoadPosts","selectedUserId","isActive","setIsActive","menuRef","useRef","selectUserName","find","user","handleOnBlur","current","contains","document","addEventListener","removeEventListener","role","App","setUsers","setSelectedUserId","isLoaling","setUserPosts","setSelectedPost","isSidebarOpen","setIsSidebarOpen","usersFromServer","handleLoadPosts","userId","postFromServer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f3331100.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  userPosts: Post[],\n  onOpenSidebar: (post: Post) => void;\n  selectedPost: Post | null;\n}\n\nexport const PostsList: React.FC<Props> = ({\n  userPosts,\n  onOpenSidebar,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {userPosts.map(post => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button',\n                  'is-link',\n                  { 'is-light': selectedPost !== post },\n                )}\n                onClick={() => onOpenSidebar(post)}\n              >\n                {selectedPost === post\n                  ? 'Close'\n                  : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorMessage {\n  None = '',\n  UserPosts = 'Unable to get a user posts',\n  Delete = 'Unable to delete comment',\n  Add = 'Unable to add new comment',\n}\n\nexport interface ErrorForm {\n  name: boolean,\n  email: boolean,\n  comment: boolean,\n}\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUserPosts = (id: number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n\nexport const getPostComments = (id: number) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\nexport const getAllComment = () => {\n  return client.get<Comment[]>('/comments');\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const addComment = (id: number, comment: Comment) => {\n  return client.post(`/comments?postId=${id}`, comment);\n};\n","import React, {\n  useState, useEffect,\n} from 'react';\n\nimport classNames from 'classnames';\nimport { addComment, getAllComment } from '../api/users';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { ErrorMessage, ErrorForm } from '../types/Error';\n\ntype Props = {\n  selectedPost: Post,\n  postComments: Comment[],\n  setPostComments: React.Dispatch<React.SetStateAction<Comment[]>>\n  setError: (error: ErrorMessage) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  postComments,\n  setPostComments,\n  setError,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [newId, setNewId] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [errorForm, setErrorForm] = useState<ErrorForm>({\n    name: false,\n    email: false,\n    comment: false,\n  });\n\n  useEffect(() => {\n    getAllComment().then(allComments => {\n      const maxId = Math.max(...allComments.map(({ id }) => id)) + 1;\n\n      setNewId(maxId);\n    });\n  }, [postComments]);\n\n  const handleClearForm = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n    setError(ErrorMessage.None);\n    setErrorForm({\n      name: false,\n      email: false,\n      comment: false,\n    });\n  };\n\n  const handleAddComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setErrorForm({\n      name: !name,\n      email: !email,\n      comment: !comment,\n    });\n\n    if (!name || !email || !comment) {\n      return;\n    }\n\n    if (!name.trim()) {\n      setErrorForm({\n        name: true,\n        email: false,\n        comment: false,\n      });\n\n      return;\n    }\n\n    if (!email.trim()) {\n      setErrorForm({\n        name: false,\n        email: true,\n        comment: false,\n      });\n\n      return;\n    }\n\n    if (!comment.trim()) {\n      setErrorForm({\n        name: false,\n        email: false,\n        comment: true,\n      });\n\n      return;\n    }\n\n    setLoading(true);\n\n    const newComment = {\n      id: newId,\n      postId: selectedPost.id,\n      body: comment,\n      name,\n      email,\n    };\n\n    addComment(selectedPost.id, newComment)\n      .then(() => {\n        setPostComments([...postComments, newComment]);\n      })\n      .catch(() => setError(ErrorMessage.Add))\n      .finally(() => {\n        setComment('');\n        setName('');\n        setEmail('');\n        setLoading(false);\n      });\n  };\n\n  const handleRemoveErrorForm = (field: string) => {\n    setErrorForm({ ...errorForm, [field]: false });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleAddComment}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': errorForm.name,\n              },\n            )}\n            value={name}\n            onChange={(e) => {\n              setName(e.target.value);\n              handleRemoveErrorForm('name');\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errorForm.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorForm.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': errorForm.email,\n              },\n            )}\n            value={email}\n            onChange={(e) => {\n              setEmail(e.target.value);\n              handleRemoveErrorForm('email');\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errorForm.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorForm.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              {\n                'is-danger': errorForm.comment,\n              },\n            )}\n            value={comment}\n            onChange={(e) => {\n              setComment(e.target.value);\n              handleRemoveErrorForm('comment');\n            }}\n          />\n        </div>\n\n        {errorForm.comment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              {\n                'is-loading': loading,\n              },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { deleteComment, getPostComments } from '../api/users';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { NewCommentForm } from './NewCommentForm';\nimport { ErrorMessage } from '../types/Error';\n\ninterface Props {\n  setErrorType: (error: ErrorMessage) => void,\n  selectedPost: Post,\n  errorType: ErrorMessage,\n}\n\nexport const PostDetails: React.FC<Props> = ({\n  setErrorType,\n  selectedPost,\n  errorType,\n}) => {\n  const [isLoading, setIsLoaling] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [formIsOpen, setFormIsOpen] = useState(false);\n  const { id, title, body } = selectedPost;\n\n  const hendleLoadComents = async () => {\n    setComments([]);\n    setIsError(false);\n    setIsLoaling(true);\n    try {\n      const commentsFromServer = await getPostComments(id);\n\n      setComments(commentsFromServer);\n\n      if (!commentsFromServer.length) {\n        setErrorType(ErrorMessage.UserPosts);\n      }\n    } catch {\n      setErrorType(ErrorMessage.UserPosts);\n      setIsError(true);\n    } finally {\n      setIsLoaling(false);\n    }\n  };\n\n  useEffect(() => {\n    hendleLoadComents();\n  }, [selectedPost]);\n\n  const handleDeleteComment = async (commentId: number) => {\n    setComments(comments\n      .filter(comment => comment.id !== commentId));\n\n    try {\n      await deleteComment(commentId);\n    } catch {\n      setFormIsOpen(false);\n      setIsError(true);\n      setErrorType(ErrorMessage.Delete);\n    }\n  };\n\n  const handleOpenForm = () => {\n    setFormIsOpen(true);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isError}\n          {isLoading && <Loader />}\n\n          {!errorType && !comments.length && !isLoading && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {errorType}\n            </div>\n          )}\n\n          {!isLoading && !comments.length && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!!comments.length && (\n            <p className=\"title is-4\">Comments:</p>\n          )}\n\n          {comments.map(comment => (\n            <article\n              key={comment.id}\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n            >\n              <div className=\"message-header\">\n                <a\n                  href={`mailto:${comment.email}`}\n                  data-cy=\"CommentAuthor\"\n                >\n                  {comment.name}\n                </a>\n\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => handleDeleteComment(comment.id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          ))}\n          {(!formIsOpen && !isLoading) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleOpenForm}\n            >\n              Write a comment\n            </button>\n          )}\n\n        </div>\n\n        {formIsOpen && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            postComments={comments}\n            setPostComments={setComments}\n            setError={setErrorType}\n\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ninterface Props {\n  users: User[],\n  onLoadPosts: (id:number) => void,\n  selectedUserId: number | null,\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  onLoadPosts,\n  selectedUserId,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n  const menuRef = useRef<HTMLDivElement>(null);\n  const selectUserName = users.find(user => (user.id === selectedUserId))?.name;\n\n  const handleOnBlur = (event: MouseEvent) => {\n    if (menuRef.current\n      && !menuRef.current.contains(event.target as HTMLElement)) {\n      setIsActive(false);\n    }\n  };\n\n  const handleOpenListUsers = () => {\n    setIsActive(!isActive);\n  };\n\n  const hendleLoadPosts = (id: number) => {\n    onLoadPosts(id);\n    setIsActive(false);\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleOnBlur);\n\n    return () => {\n      document.removeEventListener('click', handleOnBlur);\n    };\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isActive },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleOpenListUsers}\n        >\n          <span>\n            {!selectedUserId\n              ? 'Choose a user'\n              : selectUserName}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': selectUserName === user.name },\n              )}\n              onClick={() => hendleLoadPosts(user.id)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUserPosts, getUsers } from './api/users';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { ErrorMessage } from './types/Error';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [isLoaling, setIsLoaling] = useState(false);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [errorType, setErrorType] = useState<ErrorMessage>(ErrorMessage.None);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromServer => setUsers(usersFromServer));\n  }, []);\n\n  const handleLoadPosts = async (userId: number) => {\n    setIsSidebarOpen(false);\n    setSelectedPost(null);\n    setUserPosts([]);\n    setSelectedUserId(userId);\n    setIsLoaling(true);\n    try {\n      const postFromServer = await getUserPosts(userId);\n\n      setErrorType(ErrorMessage.None);\n\n      setUserPosts(postFromServer);\n\n      if (!postFromServer.length) {\n        setErrorType(ErrorMessage.UserPosts);\n      }\n    } catch {\n      setErrorType(ErrorMessage.UserPosts);\n    } finally {\n      setIsLoaling(false);\n    }\n  };\n\n  const handleOpenSidebar = (post: Post) => {\n    if (post === selectedPost) {\n      setSelectedPost(null);\n      setIsSidebarOpen(false);\n\n      return;\n    }\n\n    setIsSidebarOpen(true);\n    setSelectedPost(post);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onLoadPosts={handleLoadPosts}\n                  selectedUserId={selectedUserId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoaling && (<Loader />)}\n\n                {(!isLoaling && userPosts.length === 0 && selectedUserId\n                && errorType) && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {(!isLoaling && !userPosts.length\n                && !errorType && !handleLoadPosts)\n                && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorType}\n                  </div>\n                )}\n\n                {(!!userPosts.length && !isLoaling) && (\n                  <PostsList\n                    userPosts={userPosts}\n                    onOpenSidebar={handleOpenSidebar}\n                    selectedPost={selectedPost}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n          {isSidebarOpen && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                {selectedPost && (\n                  <PostDetails\n                    setErrorType={setErrorType}\n                    selectedPost={selectedPost}\n                    errorType={errorType}\n                  />\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}